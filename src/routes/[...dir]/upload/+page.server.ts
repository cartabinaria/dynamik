import { error } from '@sveltejs/kit';
import type { Actions, PageServerLoad } from './$types';
import {
	GITHUB_APP_ID,
	GITHUB_APP_PRIVATE_KEY,
	GITHUB_APP_INSTALLATION_ID
} from '$env/static/private';
import { fetchRepoFolders } from '$lib/server/github/githubApi';

const GITHUB_OWNER = 'cartabinaria';
const PR_TEMPLATE = `
### ðŸ“„ New Resource Upload

This pull request was automatically generated by a user upload.

**Summary of changes:**
- New file uploaded via the CartaBinaria upload interface.

_Thank you for contributing!_
`;

export const load: PageServerLoad = async ({ params, locals, fetch }) => {
	if (!locals.github_access_token) {
		return error(401, 'Unauthorized: Please log in to access this page');
	}

	const repo = params.dir?.split('/')[0] || '';
	let repoContents: { path: string }[] = [];
	if (repo) {
		try {
			repoContents = await fetchRepoFolders({
				fetch,
				owner: GITHUB_OWNER,
				repo: repo,
				token: locals.github_access_token
			});
		} catch {
			repoContents = [];
			error(500, 'Failed to fetch repository contents');
		}
	}

	return { repoContents };
};

export const actions: Actions = {
	default: async ({ request }) => {
		const formData = await request.formData();
		const repo = formData.get('repo') as string;
		const folder = formData.get('folder') as string;
		const fileName = formData.get('fileName') as string;
		const file = formData.get('file') as File;

		if (!repo || !folder || !fileName || !file) {
			throw error(400, 'Missing required fields');
		}

		const appId = GITHUB_APP_ID;
		const privateKey = GITHUB_APP_PRIVATE_KEY?.replace(/\\n/g, '\n');
		const installationId = GITHUB_APP_INSTALLATION_ID;

		if (!appId || !privateKey || !installationId) {
			throw error(500, 'GitHub App credentials are not configured');
		}

		// Inline uploadFileAndOpenPRWithApp logic here
		// 1. Read file content as ArrayBuffer and convert to base64
		const arrayBuffer = await file.arrayBuffer();
		const content = Buffer.from(arrayBuffer).toString('base64');

		// 2. Import Octokit and get authenticated client as GitHub App
		const { Octokit } = await import('octokit');
		const { createAppAuth } = await import('@octokit/auth-app');

		const octokit = new Octokit({
			authStrategy: createAppAuth,
			auth: {
				appId,
				privateKey,
				installationId
			}
		});

		// 3. Get default branch
		const { data: repoData } = await octokit.rest.repos.get({
			owner: GITHUB_OWNER,
			repo
		});
		const baseBranch = repoData.default_branch;

		// 4. Create a new branch from default branch
		const branchName = `upload-${Date.now()}`;
		const { data: refData } = await octokit.rest.git.getRef({
			owner: GITHUB_OWNER,
			repo,
			ref: `heads/${baseBranch}`
		});
		const baseSha = refData.object.sha;

		await octokit.rest.git.createRef({
			owner: GITHUB_OWNER,
			repo,
			ref: `refs/heads/${branchName}`,
			sha: baseSha
		});

		// 5. Create or update file in the new branch
		const path = folder ? `${folder.replace(/^\/|\/$/g, '')}/${fileName}` : fileName;
		await octokit.rest.repos.createOrUpdateFileContents({
			owner: GITHUB_OWNER,
			repo,
			path,
			message: `Upload ${fileName} via CartaBinaria`,
			content,
			branch: branchName
		});

		// 6. Open a pull request
		await octokit.rest.pulls.create({
			owner: GITHUB_OWNER,
			repo,
			title: `Upload ${fileName}`,
			head: branchName,
			base: baseBranch,
			body: PR_TEMPLATE
		});

		return { success: true };
	}
};

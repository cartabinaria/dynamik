import { error } from '@sveltejs/kit';
import type { Actions, PageServerLoad } from './$types';
import { env } from '$env/dynamic/private';
import { fetchRepoFolders, getUserInfo } from '$lib/server/github/githubApi';

const GITHUB_OWNER = 'cartabinaria';

import { redirect } from '@sveltejs/kit';

export const load: PageServerLoad = async ({ params, locals, fetch, url }) => {
	if (!locals.github_access_token) {
		throw redirect(302, `/login?redirect=${encodeURIComponent(url.pathname + url.search)}`);
	}

	const repo = params.dir?.split('/')[0] || '';
	if (!repo) {
		throw error(400, 'Repository name is required');
	}

	let repoContents: { path: string }[] = [];
	try {
		repoContents = await fetchRepoFolders({
			owner: GITHUB_OWNER,
			repo,
			token: locals.github_access_token,
			fetch
		});
	} catch (e) {
		console.error('Failed to fetch repository contents', { e });
		error(500, 'Failed to fetch repository contents');
	}

	return {
		repoContents
	};
};

export const actions: Actions = {
	default: async ({ request, locals, fetch }) => {
		if (!env.GITHUB_APP_ID || !env.GITHUB_APP_PRIVATE_KEY || !env.GITHUB_APP_INSTALLATION_ID) {
			error(500, 'GitHub App credentials are not configured');
		}

		const formData = await request.formData();
		const repo = formData.get('repo') as string;
		const folder = formData.get('folder') as string;
		const fileName = formData.get('fileName') as string;
		const file = formData.get('file') as File;

		console.log('Received form data:', { repo, folder, fileName, file });

		if (!repo || !folder || !fileName || !file) {
			throw error(400, 'Missing required fields');
		}

		const appId = env.GITHUB_APP_ID;
		const privateKey = env.GITHUB_APP_PRIVATE_KEY?.replace(/\\n/g, '\n');
		const installationId = env.GITHUB_APP_INSTALLATION_ID;

		if (!appId || !privateKey || !installationId) {
			throw error(500, 'GitHub App credentials are not configured');
		}

		// 1. Read file content as ArrayBuffer and convert to base64
		const arrayBuffer = await file.arrayBuffer();
		const content = Buffer.from(arrayBuffer).toString('base64');

		// 2. Import Octokit and get authenticated client as GitHub App
		const { Octokit } = await import('octokit');
		const { createAppAuth } = await import('@octokit/auth-app');

		const octokit = new Octokit({
			authStrategy: createAppAuth,
			auth: {
				appId,
				privateKey,
				installationId
			}
		});

		// 3. Get default branch
		const { data: repoData } = await octokit.rest.repos.get({
			owner: GITHUB_OWNER,
			repo
		});
		const baseBranch = repoData.default_branch;

		// 4. Create a new branch from default branch
		const branchName = `upload-${Date.now()}`;
		const { data: refData } = await octokit.rest.git.getRef({
			owner: GITHUB_OWNER,
			repo,
			ref: `heads/${baseBranch}`
		});
		const baseSha = refData.object.sha;

		await octokit.rest.git.createRef({
			owner: GITHUB_OWNER,
			repo,
			ref: `refs/heads/${branchName}`,
			sha: baseSha
		});

		// 5. Get current user info for commit author
		let user = null;
		const userAccessToken = locals.github_access_token;
		if (!userAccessToken) {
			return { success: false, error: 'User is not authenticated' };
		}
		user = await getUserInfo({ access_token: userAccessToken, fetch });
		if (!user || !user.login) {
			console.error('Failed to fetch user info:', user);
			return { success: false, error: 'Failed to fetch user info' };
		}

		const authorName = user.name || user.login;
		const authorEmail = user.email || `${user.login}@users.noreply.github.com`;

		// 6. Create or update file in the new branch, set author as user and committer as bot
		const path = folder ? `${folder.replace(/^\/|\/$/g, '')}/${fileName}` : fileName;
		await octokit.rest.repos.createOrUpdateFileContents({
			owner: GITHUB_OWNER,
			repo,
			path,
			message: `Upload ${fileName} via CartaBinaria`,
			content,
			branch: branchName,
			author: { name: authorName, email: authorEmail }
		});

		// 7. Open a pull request, tag user, list uploaded files
		const prBody = `
### ðŸ“„ New Resource Upload

This pull request was automatically generated by a user upload.

**Uploaded file(s):**
- \`${path}\`

**Uploaded by:** @${authorName}

_Thank you for contributing!_
`;

		const { data: pr } = await octokit.rest.pulls.create({
			owner: GITHUB_OWNER,
			repo,
			title: `Upload ${fileName}`,
			head: branchName,
			base: baseBranch,
			body: prBody
		});

		// 8. Assign PR to the user
		if (user && user.login) {
			await octokit.rest.issues.addAssignees({
				owner: GITHUB_OWNER,
				repo,
				issue_number: pr.number,
				assignees: [user.login]
			});
		}

		return { success: true, prUrl: pr.html_url };
	}
};
